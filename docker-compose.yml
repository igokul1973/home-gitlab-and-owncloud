version: '3'

services:
    proxy.local:
        container_name: proxy.local
        image: jwilder/nginx-proxy:latest
        volumes: 
            # - ./src/nginx/conf.d/:/etc/nginx/conf.d/
            - ./src/nginx/vhost.d:/etc/nginx/vhost.d:ro
            - ./src/certs:/etc/nginx/certs
            - /var/run/docker.sock:/tmp/docker.sock:ro
            # kupishuzi.ru
            - ./src/letsencrypt/dh-param/dhparam-2048.pem:/etc/nginx/certs/dhparam-2048.pem
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/fullchain.pem:/etc/nginx/certs/kupishuzi.ru.crt
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/privkey.pem:/etc/nginx/certs/kupishuzi.ru.key
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/fullchain.pem:/etc/nginx/certs/backend.kupishuzi.ru.crt
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/privkey.pem:/etc/nginx/certs/backend.kupishuzi.ru.key
        ports:
            - "80:80"
            - "443:443"
        restart: always
        networks:
            home_network: {}

    gitlab.local:
        container_name: gitlab.local
        image: gitlab/gitlab-ce:latest
        hostname: ${GITLAB_DOMAIN}
        volumes: 
            - ./src/gitlab/data:/var/opt/gitlab
            - ./src/gitlab/logs:/var/log/gitlab
            - ./src/gitlab/config:/etc/gitlab
            - ./src/certs:/etc/gitlab/ssl
        environment:
            - VIRTUAL_HOST=git.yourdeveloper.tk
        restart: always
        ports: 
            - "10022:22" # gitlab SSH port
            - "6789:6789" # gitlab docker registry port
        networks:
            home_network: {}

    redis:
        container_name: redis
        image: webhippie/redis:latest
        volumes:
          - ./src/redis/owncloud:/var/lib/redis
        environment:
          - REDIS_MAXCONN=10000
          - REDIS_DATABASES=1
        healthcheck:
            test: ["CMD", "/usr/bin/healthcheck"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: always
        networks:
            home_network: {}

    mariadb:
        container_name: mariadb
        image: webhippie/mariadb:latest
        volumes:
            - ./src/mariadb/owncloud/data:/var/lib/mysql
        environment:
            - MARIADB_ROOT_PASSWORD=owncloud
            - MARIADB_USERNAME=owncloud
            - MARIADB_PASSWORD=owncloud
            - MARIADB_DATABASE=owncloud
            - MARIADB_MAX_ALLOWED_PACKET=128M
            - MARIADB_INNODB_LOG_FILE_SIZE=64M
            - MARIADB_INNODB_LARGE_PREFIX=ON
            - MARIADB_INNODB_FILE_FORMAT=Barracuda
        healthcheck:
            test: ["CMD", "/usr/bin/healthcheck"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: always
        networks:
            home_network: {}

    owncloud.local:
        container_name: owncloud.local
        image: owncloud/server:${OWNCLOUD_VERSION}
        hostname: ${OWNCLOUD_DOMAIN}
        volumes: 
            - /home/igor/ownCloud/data:/mnt/data
        depends_on:
            - mariadb
            - redis
        environment:
            - VIRTUAL_HOST=${OWNCLOUD_DOMAIN}
            - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
            - OWNCLOUD_DB_TYPE=mysql
            - OWNCLOUD_DB_NAME=${OWNCLOUD_DB_NAME}
            - OWNCLOUD_DB_USERNAME=${OWNCLOUD_DB_USERNAME}
            - OWNCLOUD_DB_PASSWORD=${OWNCLOUD_DB_PASSWORD}
            - OWNCLOUD_DB_HOST=mariadb
            - OWNCLOUD_ADMIN_USERNAME=${OWNCLOUD_ADMIN_USERNAME}
            - OWNCLOUD_ADMIN_PASSWORD=${OWNCLOUD_ADMIN_PASSWORD}
            - OWNCLOUD_UTF8MB4_ENABLED=true
            - OWNCLOUD_REDIS_ENABLED=true
            - OWNCLOUD_REDIS_HOST=redis
            - OWNCLOUD_MAX_UPLOAD=16G
        restart: always
        networks:
            home_network: {}

    # Site for Mironov family
    mongo.mironov:
        container_name: mongo.mironov
        image: mongo:4.0
        volumes:
            - ./src/mongo.mironov/4.0/data:/data/db
        ports:
            - ${MONGO_MIRONOV_HOST_PORT}:27017
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_MIRONOV_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_MIRONOV_INITDB_ROOT_PASSWORD}
        restart: always
        networks:
            home_network: {}

    express.mironov:
        container_name: express.mironov
        image: git.yourdeveloper.tk:6789/igor/docker-mironov-prod-env/node8-express-angular:1.0.0
        build:
            context: .
            dockerfile: ./src/node/8.11/Dockerfile
            args:
                - app_root=${EXPRESS_MIRONOV_APP_ROOT}
        depends_on:
            - mongo.mironov
        volumes:
            - ./backend.kupishuzi.ru/:/home/node/app
            # - ./src/certs:/etc/nginx/certs
            - ./src/letsencrypt/dh-param/dhparam-2048.pem:/etc/ssl/certs/dhparam-2048.pem
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/fullchain.pem:/etc/ssl/certs/backend.kupishuzi.ru.crt
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/privkey.pem:/etc/ssl/certs/backend.kupishuzi.ru.key
        expose:
            - 80
            - 443
        environment:
            - VIRTUAL_HOST=${EXPRESS_MIRONOV_VIRTUAL_HOST}
            - VIRTUAL_PORT=${EXPRESS_MIRONOV_CONTAINER_PORT}
            - VIRTUAL_PROTO=${EXPRESS_MIRONOV_VIRTUAL_PROTO}
            - HTTP_PORT=80
            - HTTPS_PORT=443
            - NODE_ENV=production
            - MONGOLAB_URI=${MONGOLAB_URI}
            - MONGO_DB_USER=${MONGO_MIRONOV_INITDB_ROOT_USERNAME}
            - MONGO_DB_PASSWORD=${MONGO_MIRONOV_INITDB_ROOT_PASSWORD}
            - MONGO_DB_NAME=${MONGO_MIRONOV_DB_NAME}
        depends_on:
            - mongo.mironov
        command: bash -c "npm start"
        networks:
            home_network: {}

    node.cli.mironov:
        container_name: node.cli.mironov
        image: git.yourdeveloper.tk:6789/igor/docker-mironov-prod-env/node8-cli-angular:1.0.0
        build:
           context: .
           dockerfile: ./src/node-cli/8.11/Dockerfile
           args:
               - app_root=${ANGULAR_MIRONOV_APP_ROOT}
        volumes:
            - ./kupishuzi.ru/:${ANGULAR_MIRONOV_APP_ROOT}
        networks:
            home_network: {}

    angular.mironov:
        container_name: angular.mironov
        image: git.yourdeveloper.tk:6789/igor/docker-mironov-prod-env/nginx-angular:1.0.0
        build:
            context: .
            dockerfile: ./src/nginx/angular.mironov/Dockerfile
        depends_on:
            - express.mironov
        environment:
            - VIRTUAL_HOST=${ANGULAR_MIRONOV_VIRTUAL_HOST},${ANGULAR_MIRONOV_VIRTUAL_HOST_ALIAS}
            - VIRTUAL_PROTO=${ANGULAR_MIRONOV_VIRTUAL_PROTO}
            - VIRTUAL_PORT=443
        volumes:
            - ./src/letsencrypt/dh-param/dhparam-2048.pem:/etc/ssl/certs/dhparam-2048.pem
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/fullchain.pem:/etc/ssl/certs/fullchain.pem
            - /docker-volumes/etc/letsencrypt/live/kupishuzi.ru/privkey.pem:/etc/ssl/certs/privkey.pem
        expose:
            - 80
            - 443
        networks:
            home_network: {}


    letsencrypt-nginx:
        image: nginx:latest
        container_name: letsencrypt-nginx
        volumes:
            - ./src/letsencrypt/nginx.conf:/etc/nginx/conf.d/default.conf
            - ./src/letsencrypt/letsencrypt-site:/usr/share/nginx/html
        environment:
            - VIRTUAL_HOST=kupishuzi.ru,www.kupishuzi.ru,backend.kupishuzi.ru
            - VIRTUAL_PORT=80
            - VIRTUAL_PROTO=http
        networks:
            home_network: {}

networks:
    home_network:
